// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.17626
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LifeSpec.SpecTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class BasicSimulationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BasicSimulation.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Basic Simulation", "In order to explore the principles of computational science\r\nAs a dummy\r\nI want t" +
                    "o run a simulation of Conway\'s Game Of Life\r\nso that I can stop being a dummy", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Basic Simulation")))
            {
                LifeSpec.SpecTests.Features.BasicSimulationFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Live cell dies of loneliness")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Basic Simulation")]
        public virtual void LiveCellDiesOfLoneliness()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Live cell dies of loneliness", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("a grid 60 wide by 60 high");
#line 9
 testRunner.And("an alive cell at x15 y30");
#line 10
 testRunner.When("the simulation is advanced 1 step");
#line 11
 testRunner.Then("the cell at x15 y30 should be dead");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Live cell dies of starvation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Basic Simulation")]
        public virtual void LiveCellDiesOfStarvation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Live cell dies of starvation", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("a grid 15 wide by 15 high");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "x",
                        "y"});
            table1.AddRow(new string[] {
                        "4",
                        "6"});
            table1.AddRow(new string[] {
                        "5",
                        "5"});
            table1.AddRow(new string[] {
                        "5",
                        "6"});
            table1.AddRow(new string[] {
                        "6",
                        "5"});
            table1.AddRow(new string[] {
                        "4",
                        "5"});
#line 15
 testRunner.And("live cells at the following positions:", ((string)(null)), table1);
#line 22
 testRunner.When("the simulation is advanced 1 step");
#line 23
 testRunner.Then("the cell at x5 y5 should be dead");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Live cell lives in contentment with partner")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Basic Simulation")]
        public virtual void LiveCellLivesInContentmentWithPartner()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Live cell lives in contentment with partner", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("a grid 60 wide by 60 high");
#line 27
 testRunner.And("an alive cell at x15 y30");
#line 28
 testRunner.And("an alive cell at x16 y30");
#line 29
 testRunner.And("an alive cell at x14 y30");
#line 30
 testRunner.When("the simulation is advanced 1 step");
#line 31
 testRunner.Then("the cell at x15 y30 should be alive");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Lazarus rising")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Basic Simulation")]
        public virtual void LazarusRising()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Lazarus rising", ((string[])(null)));
#line 33
this.ScenarioSetup(scenarioInfo);
#line 34
 testRunner.Given("a grid 12 wide by 12 high");
#line 35
 testRunner.And("a dead cell at x5 y5");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "x",
                        "y"});
            table2.AddRow(new string[] {
                        "4",
                        "5"});
            table2.AddRow(new string[] {
                        "6",
                        "5"});
            table2.AddRow(new string[] {
                        "5",
                        "6"});
#line 36
 testRunner.And("live cells at the following positions:", ((string)(null)), table2);
#line 41
 testRunner.When("the simulation is advanced 1 step");
#line 42
 testRunner.Then("the cell at x5 y5 should be alive");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
